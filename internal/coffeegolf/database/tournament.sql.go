// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tournament.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const cleanTournamentPlacements = `-- name: CleanTournamentPlacements :exec
DELETE FROM tournament_placement WHERE tournament_id = $1
`

func (q *Queries) CleanTournamentPlacements(ctx context.Context, tournamentID int32) error {
	_, err := q.db.ExecContext(ctx, cleanTournamentPlacements, tournamentID)
	return err
}

const createTournament = `-- name: CreateTournament :one
INSERT INTO tournament (guild_id, start_time, end_time, inserted_by) VALUES ($1, $2, $3, $4) RETURNING id, guild_id, start_time, end_time, inserted_by
`

type CreateTournamentParams struct {
	GuildID    int64
	StartTime  time.Time
	EndTime    time.Time
	InsertedBy string
}

type CreateTournamentRow struct {
	ID         int32
	GuildID    int64
	StartTime  time.Time
	EndTime    time.Time
	InsertedBy string
}

func (q *Queries) CreateTournament(ctx context.Context, arg CreateTournamentParams) (CreateTournamentRow, error) {
	row := q.db.QueryRowContext(ctx, createTournament,
		arg.GuildID,
		arg.StartTime,
		arg.EndTime,
		arg.InsertedBy,
	)
	var i CreateTournamentRow
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.StartTime,
		&i.EndTime,
		&i.InsertedBy,
	)
	return i, err
}

const createTournamentPlacement = `-- name: CreateTournamentPlacement :one
INSERT INTO tournament_placement (tournament_id, player_id, tournament_placement, strokes, inserted_by) VALUES ($1, $2, $3, $4, $5) RETURNING tournament_id, player_id, tournament_placement, strokes, inserted_at, inserted_by
`

type CreateTournamentPlacementParams struct {
	TournamentID        int32
	PlayerID            int64
	TournamentPlacement int32
	Strokes             int32
	InsertedBy          string
}

// TournamentPlacement Queries
func (q *Queries) CreateTournamentPlacement(ctx context.Context, arg CreateTournamentPlacementParams) (TournamentPlacement, error) {
	row := q.db.QueryRowContext(ctx, createTournamentPlacement,
		arg.TournamentID,
		arg.PlayerID,
		arg.TournamentPlacement,
		arg.Strokes,
		arg.InsertedBy,
	)
	var i TournamentPlacement
	err := row.Scan(
		&i.TournamentID,
		&i.PlayerID,
		&i.TournamentPlacement,
		&i.Strokes,
		&i.InsertedAt,
		&i.InsertedBy,
	)
	return i, err
}

const getActiveTournament = `-- name: GetActiveTournament :one
SELECT id, guild_id, start_time, end_time, inserted_by FROM tournament WHERE guild_id = $1 AND start_time <= NOW() AND end_time >= NOW()
`

type GetActiveTournamentRow struct {
	ID         int32
	GuildID    int64
	StartTime  time.Time
	EndTime    time.Time
	InsertedBy string
}

// Tournament Queries
func (q *Queries) GetActiveTournament(ctx context.Context, guildID int64) (GetActiveTournamentRow, error) {
	row := q.db.QueryRowContext(ctx, getActiveTournament, guildID)
	var i GetActiveTournamentRow
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.StartTime,
		&i.EndTime,
		&i.InsertedBy,
	)
	return i, err
}

const getInactiveTournaments = `-- name: GetInactiveTournaments :many
SELECT id, guild_id, start_time, end_time, inserted_by FROM tournament WHERE guild_id = $1 AND end_time < $2
`

type GetInactiveTournamentsParams struct {
	GuildID int64
	EndTime time.Time
}

type GetInactiveTournamentsRow struct {
	ID         int32
	GuildID    int64
	StartTime  time.Time
	EndTime    time.Time
	InsertedBy string
}

func (q *Queries) GetInactiveTournaments(ctx context.Context, arg GetInactiveTournamentsParams) ([]GetInactiveTournamentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getInactiveTournaments, arg.GuildID, arg.EndTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInactiveTournamentsRow
	for rows.Next() {
		var i GetInactiveTournamentsRow
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.StartTime,
			&i.EndTime,
			&i.InsertedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeaders = `-- name: GetLeaders :many
SELECT SUM(total_strokes) AS total_strokes, player_id
FROM round
WHERE tournament_id = $1
AND first_round = TRUE
GROUP BY player_id
ORDER BY total_strokes ASC, inserted_by ASC
`

type GetLeadersRow struct {
	TotalStrokes int64
	PlayerID     int64
}

func (q *Queries) GetLeaders(ctx context.Context, tournamentID int32) ([]GetLeadersRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeaders, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeadersRow
	for rows.Next() {
		var i GetLeadersRow
		if err := rows.Scan(&i.TotalStrokes, &i.PlayerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlacementsForPeriod = `-- name: GetPlacementsForPeriod :many
SELECT SUM(total_strokes) AS total_strokes, player_id
FROM round
WHERE tournament_id = $1
AND first_round = TRUE
AND round_date < $2
GROUP BY player_id
ORDER BY total_strokes ASC, inserted_by ASC
`

type GetPlacementsForPeriodParams struct {
	TournamentID int32
	RoundDate    sql.NullTime
}

type GetPlacementsForPeriodRow struct {
	TotalStrokes int64
	PlayerID     int64
}

func (q *Queries) GetPlacementsForPeriod(ctx context.Context, arg GetPlacementsForPeriodParams) ([]GetPlacementsForPeriodRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlacementsForPeriod, arg.TournamentID, arg.RoundDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlacementsForPeriodRow
	for rows.Next() {
		var i GetPlacementsForPeriodRow
		if err := rows.Scan(&i.TotalStrokes, &i.PlayerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentByForDate = `-- name: GetTournamentByForDate :one
SELECT id, guild_id, start_time, end_time, inserted_by FROM tournament WHERE guild_id = $1 AND start_time <= $2 AND end_time >= $2
`

type GetTournamentByForDateParams struct {
	GuildID   int64
	StartTime time.Time
}

type GetTournamentByForDateRow struct {
	ID         int32
	GuildID    int64
	StartTime  time.Time
	EndTime    time.Time
	InsertedBy string
}

func (q *Queries) GetTournamentByForDate(ctx context.Context, arg GetTournamentByForDateParams) (GetTournamentByForDateRow, error) {
	row := q.db.QueryRowContext(ctx, getTournamentByForDate, arg.GuildID, arg.StartTime)
	var i GetTournamentByForDateRow
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.StartTime,
		&i.EndTime,
		&i.InsertedBy,
	)
	return i, err
}

const getTournamentPlacements = `-- name: GetTournamentPlacements :many
SELECT tournament_id, player_id, tournament_placement, strokes, inserted_at, inserted_by FROM tournament_placement WHERE tournament_id = $1
`

func (q *Queries) GetTournamentPlacements(ctx context.Context, tournamentID int32) ([]TournamentPlacement, error) {
	rows, err := q.db.QueryContext(ctx, getTournamentPlacements, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TournamentPlacement
	for rows.Next() {
		var i TournamentPlacement
		if err := rows.Scan(
			&i.TournamentID,
			&i.PlayerID,
			&i.TournamentPlacement,
			&i.Strokes,
			&i.InsertedAt,
			&i.InsertedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentPlacementsByPosition = `-- name: GetTournamentPlacementsByPosition :many
SELECT COUNT(*) AS count, tournament_placement, player_id
FROM tournament_placement
LEFT JOIN tournament ON tournament_placement.tournament_id = tournament.id
WHERE tournament.guild_id = $1
AND tournament_placement = $2
GROUP BY tournament_placement, player_id
`

type GetTournamentPlacementsByPositionParams struct {
	GuildID             int64
	TournamentPlacement int32
}

type GetTournamentPlacementsByPositionRow struct {
	Count               int64
	TournamentPlacement int32
	PlayerID            int64
}

func (q *Queries) GetTournamentPlacementsByPosition(ctx context.Context, arg GetTournamentPlacementsByPositionParams) ([]GetTournamentPlacementsByPositionRow, error) {
	rows, err := q.db.QueryContext(ctx, getTournamentPlacementsByPosition, arg.GuildID, arg.TournamentPlacement)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTournamentPlacementsByPositionRow
	for rows.Next() {
		var i GetTournamentPlacementsByPositionRow
		if err := rows.Scan(&i.Count, &i.TournamentPlacement, &i.PlayerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUniquePlayersInTournament = `-- name: GetUniquePlayersInTournament :many
SELECT DISTINCT player_id FROM round WHERE tournament_id = $1
`

func (q *Queries) GetUniquePlayersInTournament(ctx context.Context, tournamentID int32) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUniquePlayersInTournament, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var player_id int64
		if err := rows.Scan(&player_id); err != nil {
			return nil, err
		}
		items = append(items, player_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
