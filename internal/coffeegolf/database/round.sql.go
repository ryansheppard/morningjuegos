// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: round.sql

package database

import (
	"context"
	"database/sql"
)

const createRound = `-- name: CreateRound :one
INSERT INTO round
(tournament_id, player_id, total_strokes, original_date, percentage, first_round, inserted_by, round_date)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, tournament_id, player_id, total_strokes, original_date, inserted_at, first_round, percentage, inserted_by, round_date
`

type CreateRoundParams struct {
	TournamentID int32
	PlayerID     int64
	TotalStrokes int32
	OriginalDate string
	Percentage   string
	FirstRound   bool
	InsertedBy   string
	RoundDate    sql.NullTime
}

// Round Queries
func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, createRound,
		arg.TournamentID,
		arg.PlayerID,
		arg.TotalStrokes,
		arg.OriginalDate,
		arg.Percentage,
		arg.FirstRound,
		arg.InsertedBy,
		arg.RoundDate,
	)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.PlayerID,
		&i.TotalStrokes,
		&i.OriginalDate,
		&i.InsertedAt,
		&i.FirstRound,
		&i.Percentage,
		&i.InsertedBy,
		&i.RoundDate,
	)
	return i, err
}

const hasPlayed = `-- name: HasPlayed :one
SELECT id, tournament_id, player_id, total_strokes, original_date, inserted_at, first_round, percentage, inserted_by, round_date
FROM round
WHERE player_id = $1
AND tournament_id = $2
AND round_date = $3
AND first_round = TRUE
`

type HasPlayedParams struct {
	PlayerID     int64
	TournamentID int32
	RoundDate    sql.NullTime
}

func (q *Queries) HasPlayed(ctx context.Context, arg HasPlayedParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, hasPlayed, arg.PlayerID, arg.TournamentID, arg.RoundDate)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.PlayerID,
		&i.TotalStrokes,
		&i.OriginalDate,
		&i.InsertedAt,
		&i.FirstRound,
		&i.Percentage,
		&i.InsertedBy,
		&i.RoundDate,
	)
	return i, err
}

const hasPlayedToday = `-- name: HasPlayedToday :one
SELECT id, tournament_id, player_id, total_strokes, original_date, inserted_at, first_round, percentage, inserted_by, round_date 
FROM round
WHERE player_id = $1
AND tournament_id = $2
AND round_date = CURRENT_DATE
AND first_round = TRUE
`

type HasPlayedTodayParams struct {
	PlayerID     int64
	TournamentID int32
}

func (q *Queries) HasPlayedToday(ctx context.Context, arg HasPlayedTodayParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, hasPlayedToday, arg.PlayerID, arg.TournamentID)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.PlayerID,
		&i.TotalStrokes,
		&i.OriginalDate,
		&i.InsertedAt,
		&i.FirstRound,
		&i.Percentage,
		&i.InsertedBy,
		&i.RoundDate,
	)
	return i, err
}
